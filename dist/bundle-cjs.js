/*
Lime version 0.3.2
Mathematics computation engine
2021-2022 Lime Project Team, MIT license
https://github.com/onenylxus/lime
*/

"use strict";var helpers={};class Integer{constructor(t,e,i=0){this._signed=t,this._size=e,this.set(i)}get(){return this._value}set(t){this._value=this.clamp(this.constructor.toNumber(t))}inc(t){return this.set(this.get()+1),this.clamp(t?this.get()-1:this.get())}dec(t){return this.set(this.get()-1),this.clamp(t?this.get()+1:this.get())}clamp(t){const e=2**this._size/2,i=this._signed?-1:0,r=new Interval(e*i,e*(2+i),!0,!1);return r.clamp(Math.trunc(t))}static toNumber(t){return Types$a.isNumber(t)?t:this.constructor.toInteger(t.get()).get()}static toInteger(t){return Types$a.isNumber(t)?new this.constructor(t):t}static Int8=class extends Integer{constructor(t){super(!0,8,t)}};static Int16=class extends Integer{constructor(t){super(!0,16,t)}};static Int32=class extends Integer{constructor(t){super(!0,32,t)}};static Uint8=class extends Integer{constructor(t){super(!1,8,t)}};static Uint16=class extends Integer{constructor(t){super(!1,16,t)}};static Uint32=class extends Integer{constructor(t){super(!1,32,t)}}}helpers.Integer=Integer;class Interval{constructor(t,e,i=!0,r=!0){this._low=t,this._high=e,this._lowClosed=i,this._highClosed=r}range(){return this._high-this._low}low(){return this._low}mid(){return this._low+this.range()/2}high(){return this._high}between(t){return(this._lowClosed?t>=this.low():t>this.low())&&(this._highClosed?t<=this.high():t<this.high())}clamp(t){for(;this._lowClosed?t<this.low():t<=this.low();)t+=this.range();for(;this._highClosed?t>this.high():t>=this.high();)t-=this.range();return t}}helpers.Interval=Interval;class Lever{constructor(t,e=0){this._options=[...t],this._state=e}get(){return this._options[this._state]}next(){return this._state++,this._state>=this._options.length&&(this._state=0),this.get()}previous(){return this._state--,this._state<0&&(this._state=this._options.length-1),this.get()}jump(t){return 0<=this._state&&this._state<this._options.length&&(this._state=t),this.get()}}helpers.Lever=Lever;class Matrix{constructor(e){Types$a.isVector(...e)&&!e.some(t=>t.size()!==e[0].size())&&(this._vectors=e)}get vectors(){return[...this._vectors]}add(t){const e=[],i=Math.max(this.row(),t.row()),r=Math.max(this.column(),t.column()),s=this.expand(i,r),n=t.expand(i,r);for(let t=0;t<i;t++)e.push(s.vectors[t].add(n.vectors[t]));return Matrix.build(e)}subtract(t){return this.add(t.scale(-1))}scale(e){var t=this.vectors.map(t=>t.scale(e));return Matrix.build(t)}mulMat(e){if(Types$a.isMatrix(e)){const i=[];for(let t=0;t<e.column();t++)i.push(this.mulVec(e.transpose().vectors[t]));return Matrix.build(i).transpose()}}mulVec(e){if(Types$a.isVector(e)){const i=[],t=Math.max(this.column(),e.size()),r=this.expand(this.row(),t);for(let t=0;t<this.row();t++)i.push(r.vectors[t].dot(e));return Vector.build(i)}}transpose(){const t=[];for(let e=0;e<this.column();e++)t.push(Vector.build(this.vectors.map(t=>t.values[e])));return Matrix.build(t)}det(){if(this.square()){if(1===this.row())return this.vectors[0].values[0];let e=0;for(let t=0;t<this.row();t++)e+=this.vectors[0].values[t]*(t%2?-1:1)*this.minor(0,t).det();return e}}inverse(){if(this.square()&&0!==this.det()){if(1===this.row())return this.scale(1/this.det()**2);const t=[],r=(t,e)=>this.minor(t,e).det()*((t+e)%2?-1:1);for(let i=0;i<this.row();i++)t.push(Vector.build(this.vectors[i].values.map((t,e)=>r(i,e))));return Matrix.build(t).transpose().scale(1/this.det())}}row(){return this.vectors.length}column(){return this.vectors[0].size()}square(){return this.row()===this.column()}minor(e,i){const t=new Interval(0,this.row()-1),r=new Interval(0,this.column()-1);if(t.between(e)&&r.between(i)){let t=this.vectors;return t.splice(e,1),Matrix.build(t.map(t=>t.splice(i)))}}expand(t,e){let i=this.vectors;for(;i.length<t;)i.push(Vector.fill(e,0));return Matrix.build(i.map(t=>t.expand(e)))}static build(t){const e=Math.max(...t.map(t=>t.size()));var i=t.map(t=>t.expand(e));switch(i.length){case 2:switch(e){case 2:return new Matrix.Matrix22(i);case 3:return new Matrix.Matrix23(i);case 4:return new Matrix.Matrix24(i);default:return new Matrix(i)}case 3:switch(e){case 2:return new Matrix.Matrix32(i);case 3:return new Matrix.Matrix33(i);case 4:return new Matrix.Matrix34(i);default:return new Matrix(i)}case 4:switch(e){case 2:return new Matrix.Matrix42(i);case 3:return new Matrix.Matrix43(i);case 4:return new Matrix.Matrix44(i);default:return new Matrix(i)}default:return new Matrix(i)}}static fill(t,e,i){return Matrix.build(new Array(t).fill(Vector.fill(e,i)))}static Matrix22=class extends Matrix{constructor([t,e]){super([t,e]),2!==t.size||e.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}};static Matrix23=class extends Matrix{constructor([t,e]){super([t,e]),3!==t.size||e.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}};static Matrix24=class extends Matrix{constructor([t,e]){super([t,e]),4!==t.size||e.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}};static Matrix32=class extends Matrix{constructor([t,e,i]){super([t,e,i]),2!==t.size||2!==e.size||i.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}get r(){return this.vectors[2]}};static Matrix33=class extends Matrix{constructor([t,e,i]){super([t,e,i]),3!==t.size||3!==e.size||i.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}get r(){return this.vectors[2]}};static Matrix34=class extends Matrix{constructor([t,e,i]){super([t,e,i]),4!==t.size||4!==e.size||i.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}get r(){return this.vectors[2]}};static Matrix42=class extends Matrix{constructor([t,e,i,r]){super([t,e,i,r]),2!==t.size||2!==e.size||2!==i.size||r.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}get r(){return this.vectors[2]}get s(){return this.vectors[3]}};static Matrix43=class extends Matrix{constructor([t,e,i,r]){super([t,e,i,r]),3!==t.size||3!==e.size||3!==i.size||r.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}get r(){return this.vectors[2]}get s(){return this.vectors[3]}};static Matrix44=class extends Matrix{constructor([t,e,i,r]){super([t,e,i,r]),4!==t.size||4!==e.size||4!==i.size||r.size}get p(){return this.vectors[0]}get q(){return this.vectors[1]}get r(){return this.vectors[2]}get s(){return this.vectors[3]}}}helpers.Matrix=Matrix;class Queue{constructor(t=0){this._capacity=0<t?t:1/0,this._head=0,this._tail=0,this._store={}}enqueue(t){this.size()<this._capacity&&(this._store[this._tail++]=t)}dequeue(){if(!this.empty()){var t=this.top();return delete this._store[this._head++],t}}top(){return this.empty()?void 0:this._store[this._head]}clear(){for(;!this.empty();)this.dequeue()}size(){return this._tail-this._head}empty(){return 0===this.size()}}helpers.Queue=Queue;class Stack{constructor(t=0){this._capacity=0<t?t:1/0,this._size=0,this._store={}}push(t){this.size()<this._capacity&&(this._store[this._size++]=t)}pop(){if(!this.empty()){var t=this.top();return delete this._store[--this._size],t}}top(){return this.empty()?void 0:this._store[this.size()-1]}clear(){for(;!this.empty();)this.pop()}size(){return this._size}empty(){return 0===this.size()}}helpers.Stack=Stack;class Types$a{static isUndefined(...t){return t.every(t=>void 0===t)}static isNull(...t){return t.every(t=>null===t)}static isTrue(...t){return t.every(t=>!0===t)}static isFalse(...t){return t.every(t=>!1===t)}static isBoolean(...t){return t.every(t=>"boolean"==typeof t)}static isNumber(...t){return t.every(t=>"number"==typeof t)}static isBigInt(...t){return t.every(t=>"bigint"==typeof t)}static isString(...t){return t.every(t=>"string"==typeof t)}static isFunction(...t){return t.every(t=>"function"==typeof t)}static isSymbol(...t){return t.every(t=>"symbol"==typeof t)}static isArray(...t){return t.every(t=>t instanceof Array)}static isObject(...t){return t.every(t=>t instanceof Object)}static isClass(e,...t){return t.every(t=>t instanceof e)}static isInteger(...t){return Types$a.isClass(Integer,...t)}static isInterval(...t){return Types$a.isClass(Interval,...t)}static isLever(...t){return Types$a.isClass(Lever,...t)}static isMatrix(...t){return Types$a.isClass(Matrix,...t)}static isQueue(...t){return Types$a.isClass(Queue,...t)}static isStack(...t){return Types$a.isClass(Stack,...t)}static isVector(...t){return Types$a.isClass(Vector,...t)}}helpers.Types=Types$a;class Vector{constructor(t){this._values=t}get values(){return[...this._values]}add(e){const i=[],r=Math.max(this.size(),e.size());for(let t=0;t<r;t++)i.push(this.expand(r).values[t]+e.expand(r).values[t]);return Vector.build(i)}subtract(t){return this.add(t.scale(-1))}scale(e){var t=this.values.map(t=>t*e);return Vector.build(t)}dot(e){var i=Math.max(this.size(),e.size());let r=0;for(let t=0;t<i;t++)r+=this.expand(i).values[t]*e.expand(i).values[t];return r}length(){return Math.sqrt(this.dot(this))}normalize(){return 0<this.length()?this.scale(1/this.length()):void 0}size(){return this.values.length}splice(e){const t=new Interval(0,this.size()-1);if(t.between(e)){let t=this.values;return t.splice(e,1),Vector.build(t)}}expand(t){let e=this.values;for(;e.length<t;)e.push(0);return Vector.build(e)}static build(t){switch(t.length){case 2:return new Vector.Vector2(t);case 3:return new Vector.Vector3(t);case 4:return new Vector.Vector4(t);default:return new Vector(t)}}static fill(t,e){return Vector.build(new Array(t).fill(e))}static Vector2=class extends Vector{constructor([t,e]){super([t,e])}get x(){return this.values[0]}get y(){return this.values[1]}};static Vector3=class xb extends Vector{constructor([t,e,i]){super([t,e,i])}get x(){return this.values[0]}get y(){return this.values[1]}get z(){return this.values[2]}cross(t){if(t instanceof Vector&&t.expand(3)instanceof xb)return new xb([this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x])}};static Vector4=class extends Vector{constructor([t,e,i,r]){super([t,e,i,r])}get x(){return this.values[0]}get y(){return this.values[1]}get z(){return this.values[2]}get w(){return this.values[3]}}}helpers.Vector=Vector;const Compiler$1={strc:t=>t.map(([t,e])=>{const i=""+t.charAt(0).toUpperCase()+t.slice(1);return Object.defineProperty(e,"name",{value:i.startsWith("Lime")?i:"Lime"+i}),[t,e]}),cmd:t=>t.map(([t,e])=>{const i=""+t.charAt(0).toUpperCase()+t.slice(1);return Object.defineProperty(e,"name",{value:i.startsWith("LimeCommand")?i:"LimeCommand"+i}),[t,e]}),expr:t=>t.map(([t,e])=>{const i=""+t.charAt(0).toUpperCase()+t.slice(1);return Object.defineProperty(e,"name",{value:i.startsWith("LimeExpression")?i:"LimeExpression"+i}),[t,e]}),func:t=>t.map(([t,e])=>{const i=""+t.charAt(0).toUpperCase()+t.slice(1);return Object.defineProperty(e,"name",{value:i.startsWith("LimeFunction")?i:"LimeFunction"+i}),[t,e]})};var compiler=Compiler$1,name="@onenylxus/lime",version="0.3.2",description="Mathematics computation engine",author="Lime Project Team",license="MIT",keywords=["javascript","mathematics"],files=["dist/*","docs/*","LICENSE.md","README.md","yarn.lock"],main="dist/bundle.js",module$2="dist/bundle-cjs.js",browser="dist/bundle-esm.js",sideEffects=!1,dependencies={"@onenylxus/helpers":"^1.1.0"},devDependencies={"@rollup/plugin-commonjs":"^20.0.0","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^13.0.0",codecov:"^3.8.2",eslint:"^7.25.0","eslint-config-airbnb-base":"^14.2.1","eslint-plugin-import":"^2.24.2",husky:"^7.0.2",jest:"^27.1.0","lint-staged":"^11.1.2","prettier-eslint":"^13.0.0","prettier-eslint-cli":"^5.0.1",rimraf:"^3.0.2",rollup:"^2.56.3","rollup-plugin-node-polyfills":"^0.2.1","rollup-plugin-uglify":"^6.0.4"},scripts={lint:"prettier-eslint '**/*.js'",clean:"rimraf dist/*.js",debug:"node examples/prompt.js -q",prebuild:"yarn lint && yarn clean",build:"rollup -c",watch:"jest --config jest.config.json --watch",pretest:"yarn build",test:"jest --config jest.config.json --verbose"},husky={hooks:{"pre-commit":"yarn test"}},repository={type:"git",url:"git+https://github.com/onenylxus/lime.git"},bugs={url:"https://github.com/onenylxus/lime/issues"},homepage="https://github.com/onenylxus/lime#readme",require$$0={name:name,version:version,description:description,author:author,license:license,keywords:keywords,files:files,main:main,module:module$2,browser:browser,sideEffects:sideEffects,dependencies:dependencies,devDependencies:devDependencies,scripts:scripts,husky:husky,repository:repository,bugs:bugs,homepage:homepage};const Package=require$$0;function banner$1(){return["Lime version "+Package.version,Package.description,`2021-2022 ${Package.author}, ${Package.license} license`,Package.homepage.slice(0,-7)].join("\n")}var banner_1=banner$1;class LimeCommand$5{constructor(t,{...e}){this.lime=t,this.name=e.hasOwnProperty("name")?e.name:this.constructor.name.slice(11),this.description=e.hasOwnProperty("description")?e.description:"",this.operations=new Map}execute(t){var e=t.split(/\s/).slice(1),t=e.length;if(!this.operations.has(t))throw new Error("error:invalidParametersInCommand");return this.operations.get(t)(...e)}}var command=LimeCommand$5;const banner=banner$1,LimeCommand$4=command;class LimeCommandAbout extends LimeCommand$4{constructor(t){super(t,{name:"about",description:"show information about the engine"}),this.operations.set(0,()=>banner())}}var about$1=LimeCommandAbout;const LimeCommand$3=command;class LimeCommandClear extends LimeCommand$3{constructor(t){super(t,{name:"clear",description:"clear variables and memory"}),this.operations.set(0,()=>(this.lime.variables=new Map,this.lime.memory=[],this.lime.store={},"Cleared"))}}var clear$1=LimeCommandClear;const LimeCommand$2=command;class LimeCommandConfig extends LimeCommand$2{constructor(t){super(t,{name:"config",description:"view and modify engine configurations"}),this.operations.set(1,t=>{if(!this.lime.config.hasOwnProperty(t))throw new Error("error:invalidConfigProperty");return t+": "+this.lime.config[t]}),this.operations.set(2,(t,e)=>{if(!this.lime.config.hasOwnProperty(t))throw new Error("error:invalidConfigProperty");var i=this.lime.config[t];return this.lime.config[t]=this.lime.direct([e.match(/^[-+]?\d+$/)?+e:e]).value,t+`: ${i} > `+this.lime.config[t]})}}var config$1=LimeCommandConfig;const LimeCommand$1=command;class LimeCommandHelp extends LimeCommand$1{constructor(t){super(t,{name:"help",description:"list all available commands"}),this.operations.set(0,()=>{const i=["Below is a list of available commands:"];return this.lime.module.forEach(t=>{try{var e=new t(this.lime);e instanceof LimeCommand$1&&i.push(e.name+": "+e.description)}catch(t){}}),i.join("\n")})}}var help$1=LimeCommandHelp;const Types$9=helpers["Types"],LimeCommand=command;class LimeCommandList extends LimeCommand{constructor(t){super(t,{name:"list",description:"list specified engine property"}),this.operations.set(1,t=>{if(!this.lime.hasOwnProperty(t)||Types$9.isFunction(this.lime[t]))throw new Error("error:invalidListProperty");t=this.lime[t];return Types$9.isClass(Map,t)?Object.fromEntries(t):t})}}var list$1=LimeCommandList;const Types$8=helpers["Types"];class LimeExpression$9{constructor(t,{...e}){this.lime=t,this.name=e.hasOwnProperty("name")?e.name:this.constructor.name.slice(12),this.isSimple=!e.hasOwnProperty("isSimple")||!Types$8.isBoolean(e.isSimple)||e.isSimple}}var expression=LimeExpression$9;const Types$7=helpers["Types"],LimeExpression$8=expression;class LimeExpressionArgument extends LimeExpression$8{constructor(t,...e){if(super(t,{name:"argument",isSimple:!1}),!this.lime.identify("expression")(...e)&&!Types$7.isNull(e[0]))throw new Error("issue:invalidExpressionInConstruct");this.places=e}get value(){return this.places.map(t=>t.value)}get length(){return this.isEmpty?0:this.places.length}get isEmpty(){return Types$7.isNull(this.places[0])}simplify(){return this.places.map(t=>t.simplify())}finalize(){return 1===this.length?this.places[0].finalize():this.places.map(t=>t.finalize())}}var argument=LimeExpressionArgument;const LimeExpression$7=expression;class LimeExpressionBoolean extends LimeExpression$7{constructor(t,e){super(t,{name:"boolean",isSimple:!0}),this.raw=e}get value(){return!!this.raw}toInteger(){if(this.lime.config.strictBoolean)throw new Error("warn:strictBoolean");return this.lime.direct([+this.value])}simplify(){return this.lime.build("boolean")(this.value)}finalize(){return this.simplify()}print(){return this.value?"true":"false"}}var boolean=LimeExpressionBoolean;const LimeExpression$6=expression;class LimeExpressionComplex extends LimeExpression$6{constructor(t,e,i){if(super(t,{name:"complex",isSimple:!0}),!this.lime.identify("integer","rational")(e,i))throw new Error("issue:invalidExpressionInConstruct");this.rPlace=e,this.iPlace=i}get value(){return{r:this.rPlace.value,i:this.iPlace.value}}toBoolean(){return this.lime.build("boolean")(this.value.r||this.value.i)}simplify(){return this.lime.direct([this.iPlace,"==",0]).value?this.rPlace.simplify():this.lime.build("complex")(this.rPlace.simplify(),this.iPlace.simplify())}finalize(){return this.simplify()}print(){var t=this.lime.direct(["sgn","(",this.iPlace,")"]).value;return`${0===this.value.r?"":this.rPlace.print()+(0<t?"+":"")}${1===this.value.i?"":-1===this.value.i?"-":this.iPlace.print()}i`}}var complex=LimeExpressionComplex;const Types$6=helpers["Types"],LimeExpression$5=expression;class LimeExpressionInteger extends LimeExpression$5{constructor(t,e){if(super(t,{name:"integer",isSimple:!0}),!Types$6.isNumber(+e))throw new Error("issue:invalidExpressionInConstruct");this.string=""+e}get value(){return Math.trunc(+this.string)}toBoolean(){return this.lime.build("boolean")(this.value)}toComplex(){return this.lime.build("complex")(this,this.lime.build("integer")(0))}toRational(){return this.lime.build("rational")(this,this.lime.build("integer")(1))}simplify(){return this.lime.build("integer")(this.value)}finalize(){return this.simplify()}print(){return""+this.value}}var integer=LimeExpressionInteger;const Types$5=helpers["Types"],LimeExpression$4=expression;class LimeExpressionMatrix extends LimeExpression$4{constructor(t,e){if(super(t,{name:"matrix",isSimple:!1}),!this.lime.identify("expression")(...e.flat())&&!Types$5.isNull(e[0][0]))throw new Error("issue:invalidExpressionInConstruct");const i=e[0].length;if(e.some(t=>t.length!==i))throw new Error("error:invalidMatrixDimensions");this.places=e}get value(){return this.places.map(t=>t.map(t=>t.value))}get row(){return this.isEmpty?0:this.places.length}get column(){return this.isEmpty?0:this.places[0].length}get size(){return this.row*this.column}get isEmpty(){return Types$5.isNull(this.places[0][0])}simplify(){return this.places=this.places.map(t=>t.map(t=>t.simplify())),this}finalize(){return this.places=this.places.map(t=>t.map(t=>t.finalize())),this}print(){let i="";if(this.lime.config.testMode){i+="[";for(let e=0;e<this.row;e++){i+=0===e?"":";";for(let t=0;t<this.column;t++)i+=(0===t?"":",")+this.places[e][t].print()}i+="]"}else{var r=this.places.map(t=>t.map(t=>t.print().length));const s=[];for(let i=0;i<this.column;i++){let e=0;for(let t=0;t<this.row;t++)e=Math.max(r[t][i],e);s.push(e)}for(let e=0;e<this.row;e++){for(let t=0;t<this.column;t++)i+=new Array(s[t]-r[e][t]+this.lime.config.tabSize+1).join(" ")+this.places[e][t].print();i+=e<this.row-1?"\n":""}}return i}}var matrix$1=LimeExpressionMatrix;const LimeExpression$3=expression;class LimeExpressionRational extends LimeExpression$3{constructor(t,e,i){if(super(t,{name:"rational",isSimple:!0}),!this.lime.identify("integer")(e,i))throw new Error("issue:invalidExpressionInConstruct");this.nPlace=e,this.dPlace=i}get value(){return{n:this.nPlace.value,d:this.dPlace.value}}toBoolean(){return this.lime.build("boolean")(this.value.n/this.value.d)}toComplex(){return this.lime.build("complex")(this,this.lime.build("integer")(0))}simplify(){var t=this.lime.direct(["gcd","(",this.nPlace,",",this.dPlace,")"]);return this.nPlace=this.lime.direct([this.nPlace,"/",t]),this.dPlace=this.lime.direct([this.dPlace,"/",t]),this.value.d<0&&(this.nPlace=this.lime.direct(["-",this.nPlace]),this.dPlace=this.lime.direct(["-",this.dPlace])),1===this.value.d?this.nPlace.simplify():this.lime.build("rational")(this.nPlace.simplify(),this.dPlace.simplify())}finalize(){return this.simplify()}print(){if(0<=this.lime.config.decimalPlaces){var t=10**this.lime.config.decimalPlaces;return""+Math.round(this.value.n*t/this.value.d)/t}return this.nPlace.print()+"/"+this.dPlace.print()}}var rational=LimeExpressionRational;const Types$4=helpers["Types"],LimeExpression$2=expression;class LimeExpressionSet extends LimeExpression$2{constructor(t,...r){if(super(t,{name:"set",isSimple:!1}),!this.lime.identify("expression")(...r)&&!Types$4.isNull(r[0]))throw new Error("issue:invalidExpressionInConstruct");this.places=[];for(let i=0;i<r.length;i++)this.places.some((t,e)=>i!==e&&this.lime.direct([t,"==",r[i]]).value)||this.places.push(r[i])}get value(){return this.places.map(t=>t.value)}get length(){return this.isEmpty?0:this.places.length}get isEmpty(){return Types$4.isNull(this.places[0])}simplify(){return this.places=this.places.map(t=>t.simplify()),this}finalize(){return this.places=this.places.map(t=>t.finalize()),this}print(){var e=this.lime.config.testMode?"":" ";let i="{";for(let t=0;t<this.length;t++)i+=e+this.places[t].print()+(t<this.length-1?",":e+"}");return i}}var set=LimeExpressionSet;const LimeExpression$1=expression;class LimeExpressionString extends LimeExpression$1{constructor(t,e){super(t,{name:"string",isSimple:!0}),this.value=e}simplify(){return this}finalize(){return this.simplify()}print(){return`"${this.value}"`}}var string=LimeExpressionString;const LimeExpression=expression;class LimeExpressionVariable extends LimeExpression{constructor(t,e){super(t,{name:"variable",isSimple:!0}),this.key=e}get value(){if(!this.lime.variables.has(this.key))throw new Error("error:undefinedVariable");return this.lime.variables.get(this.key)}simplify(){return this.value.simplify()}finalize(){return this.simplify()}}var variable=LimeExpressionVariable;const Oplist$1={cond:{"b(bool,bool)":t=>t.bpi("boolean"),"b(comp,comp)":t=>t.bpi("complex"),"b(comp,{int|rat})":t=>t.lpi("complex")&&t.rpi("integer","rational"),"b(expr,expr)":t=>t.bpi("expression"),"b(expr,str)":t=>t.lpi("expression")&&t.rpi("string"),"b(int,int)":t=>t.bpi("integer"),"b(int,mat)":t=>t.lpi("integer")&&t.rpi("matrix"),"b(int,rat)":t=>t.lpi("integer")&&t.rpi("rational"),"b(mat,arg{int[1]})":t=>t.lpi("matrix")&&t.rpi("argument")&&1===t.right.length&&t.ci("integer")(...t.right.places),"b(mat,int)":t=>t.lpi("matrix")&&t.rpi("integer"),"b(mat,mat)":t=>t.bpi("matrix"),"b(mat,{comp|int|rat})":t=>t.lpi("matrix")&&t.rpi("complex","integer","rational"),"b(rat,int)":t=>t.lpi("rational")&&t.rpi("integer"),"b(rat,rat)":t=>t.bpi("rational"),"b(str,str)":t=>t.bpi("string"),"b(var,expr)":t=>t.lpi("variable")&&t.rpi("expression"),"b({comp|int|rat},mat)":t=>t.lpi("complex","integer","rational")&&t.rpi("matrix"),"b({int|rat},comp)":t=>t.lpi("integer","rational")&&t.rpi("complex"),"b({int|rat},mat)":t=>t.lpi("integer","rational")&&t.rpi("matrix"),"l(arg{expr[1]})":t=>t.lpi("argument")&&1===t.left.length&&t.ci("expression")(...t.left.places),"l(bool)":t=>t.lpi("boolean"),"l(int)":t=>t.lpi("integer"),"l(var)":t=>t.lpi("variable"),"l({comp|int|rat})":t=>t.lpi("complex","integer","rational"),"n()":()=>!0,"r(arg{})":t=>t.rpi("argument")&&t.right.isEmpty,"r(arg{comp[1]})":t=>t.rpi("argument")&&1===t.right.length&&t.ci("complex")(...t.right.places),"r(arg{expr[1]})":t=>t.rpi("argument")&&1===t.right.length&&t.ci("expression")(...t.right.places),"r(arg{expr[@]})":t=>t.rpi("argument")&&t.ci("expression")(...t.right.places),"r(arg{int[1]})":t=>t.rpi("argument")&&1===t.right.length&&t.ci("integer")(...t.right.places),"r(arg{int[2]})":t=>t.rpi("argument")&&2===t.right.length&&t.ci("integer")(...t.right.places),"r(arg{rat[1]})":t=>t.rpi("argument")&&1===t.right.length&&t.ci("rational")(...t.right.places),"r(arg{set[2]})":t=>t.rpi("argument")&&2===t.right.length&&t.ci("set")(...t.right.places),"r(arg{mat[1]})":t=>t.rpi("argument")&&1===t.right.length&&t.ci("matrix")(...t.right.places),"r(arg{mat[1],int[1]})":t=>t.rpi("argument")&&2===t.right.length&&t.ci("matrix")(t.right.places[0])&&t.ci("integer")(t.right.places[1]),"r(arg{mat[1],int[2]})":t=>t.rpi("argument")&&3===t.right.length&&t.ci("matrix")(t.right.places[0])&&t.ci("integer")(t.right.places[1],t.right.places[2]),"r(arg{str[1]})":t=>t.rpi("argument")&&1===t.right.length&&t.ci("string")(...t.right.places),"r(arg{str[@]})":t=>t.rpi("argument")&&t.ci("string")(...t.right.places),"r(arg{{int|rat}[$]})":e=>e.rpi("argument")&&e.right.places.some(t=>e.ci("integer","rational")(t)),"r(bool)":t=>t.rpi("boolean"),"r(int)":t=>t.rpi("integer"),"r(mat)":t=>t.rpi("matrix"),"r(rat)":t=>t.rpi("rational"),"r(var)":t=>t.rpi("variable"),"r({comp|int|rat})":t=>t.rpi("complex","integer","rational"),"r(+)":t=>t.rpi("add"),"r(=)":t=>t.rpi("assign"),"r(&)":t=>t.rpi("bitwiseAnd"),"r(|)":t=>t.rpi("bitwiseOr"),"r(/)":t=>t.rpi("divide"),"r(^)":t=>t.rpi("exponent"),"r(!)":t=>t.rpi("factorial"),"r(>)":t=>t.rpi("greater"),"r(%)":t=>t.rpi("modulo"),"r(*)":t=>t.rpi("multiply"),"r(_-)":t=>t.rpi("negative"),"r(_+)":t=>t.rpi("positive"),"r(<)":t=>t.rpi("smaller"),"r(-)":t=>t.rpi("subtract"),"z()":t=>0===t.pos},act:{"f(_.)":t=>{t.fs(t.lime.refer("_."))},"f(==)":t=>{t.rus(t.lime.refer("=="))},"f(!==)":t=>{t.rus(t.lime.refer("!"),t.lime.refer("=="))},"f(>=)":t=>{t.rus(t.lime.refer(">="))},"f(&&)":t=>{t.rus(t.lime.refer("&&"))},"f(_!)":t=>{t.fs(t.lime.refer("_!"))},"f(||)":t=>{t.rus(t.lime.refer("||"))},"f(_-)":t=>{t.fs(t.lime.refer("_-"))},"f(!=)":t=>{t.rus(t.lime.refer("!="))},"f(_+)":t=>{t.fs(t.lime.refer("_+"))},"f(.+)":t=>{t.rus(t.lime.refer(".+"))},"f(./)":t=>{t.rus(t.lime.refer("./"))},"f(.^)":t=>{t.rus(t.lime.refer(".^"))},"f(.%)":t=>{t.rus(t.lime.refer(".%"))},"f(.*)":t=>{t.rus(t.lime.refer(".*"))},"f(.-)":t=>{t.rus(t.lime.refer(".-"))},"f(<<)":t=>{t.rus(t.lime.refer("<<"))},"f(>>)":t=>{t.rus(t.lime.refer(">>"))},"f(<=)":t=>{t.rus(t.lime.refer("<="))},"l(arg{expr[1]}->expr)":t=>{t.lps(t.left.finalize())},"l(expr->int)":t=>{t.lps(t.left.toInteger())},"l(expr->rat)":t=>{t.lps(t.left.toRational())},"l(var->expr)":t=>{t.lps(t.left.value)},"l({comp|int|rat}->bool)":t=>{t.lps(t.left.toBoolean())},"l({int|rat}->comp)":t=>{t.lps(t.left.toComplex())},"r(arg{expr[1]}->expr)":t=>{t.rps(t.right.finalize())},"r(arg{{int|rat}[$]}->arg{comp[$]})":e=>{const t=e.right;t.places=t.places.map(t=>e.ci("integer","rational")(t)?t.toComplex():t),e.rps(t)},"r(expr->int)":t=>{t.rps(t.right.toInteger())},"r(expr->rat)":t=>{t.rps(t.right.toRational())},"r(var->expr)":t=>{t.rps(t.right.value)},"r({comp|int|rat}->bool)":t=>{t.rps(t.right.toBoolean())},"r({int|rat}->comp)":t=>{t.rps(t.right.toComplex())},"r(_!)":t=>{t.rps(t.lime.refer("_!"))},"r(_-)":t=>{t.rps(t.lime.refer("_-"))},"r(_+)":t=>{t.rps(t.lime.refer("_+"))}},pair:{"cb(comp,{int|rat}->comp)":["b(comp,{int|rat})","r({int|rat}->comp)"],"cb(int->rat,rat)":["b(int,rat)","l(expr->rat)"],"cb(rat,int->rat)":["b(rat,int)","r(expr->rat)"],"cb({int|rat}->comp,comp)":["b({int|rat},comp)","l({int|rat}->comp)"],"cl(arg{expr[1]}->expr)":["l(arg{expr[1]})","l(arg{expr[1]}->expr)"],"cl(bool->int)":["l(bool)","l(expr->int)"],"cl(var->expr)":["l(var)","l(var->expr)"],"cl({comp|int|rat}->bool)":["l({comp|int|rat})","l({comp|int|rat}->bool)"],"cr(arg{expr[1]}->expr)":["r(arg{expr[1]})","r(arg{expr[1]}->expr)"],"cr(arg{{int|rat}[$]}->arg{comp[$]})":["r(arg{{int|rat}[$]})","r(arg{{int|rat}[$]}->arg{comp[$]})"],"cr(bool->int)":["r(bool)","r(expr->int)"],"cr(var->expr)":["r(var)","r(var->expr)"],"cr({comp|int|rat}->bool)":["r({comp|int|rat})","r({comp|int|rat}->bool)"],"tf(_.)":["b(int,int)","f(_.)"],"tf(==)":["r(=)","f(==)"],"tf(!==)":["r(=)","f(!==)"],"tf(>=)":["r(=)","f(>=)"],"tf(&&)":["r(&)","f(&&)"],"tf(||)":["r(|)","f(||)"],"tf(!=)":["r(=)","f(!=)"],"tf(.+)":["r(+)","f(.+)"],"tf(./)":["r(/)","f(./)"],"tf(.^)":["r(^)","f(.^)"],"tf(.%)":["r(%)","f(.%)"],"tf(.*)":["r(*)","f(.*)"],"tf(.-)":["r(-)","f(.-)"],"tf(<<)":["r(<)","f(<<)"],"tf(>>)":["r(>)","f(>>)"],"tf(<=)":["r(=)","f(<=)"],"tr(_!)":["r(!)","r(_!)"],"tr(_+)":["r(+)","r(_+)"],"tr(_-)":["r(-)","r(_-)"],"tz(_!)":["z()","f(_!)"],"tz(_+)":["z()","f(_+)"],"tz(_-)":["z()","f(_-)"]}};var oplist=Oplist$1,require$$2$1=[["columnSplit","rowSplit"],["assign","equal","greater","greaterEqual","notEqual","smaller","smallerEqual"],["add","bitwiseAnd","bitwiseNot","bitwiseOr","logicalAnd","logicalNot","logicalOr","modulo","scalarAdd","scalarModulo","scalarSubtract","shiftLeft","shiftRight","subtract"],["divide","multiply","scalarDivide","scalarMultiply"],["exponent","scalarExponent"],["decimal","negative","positive"],["absolute","adjoint","ceiling","cofactor","combination","concatenate","conjugate","determinant","factor","factorial","fibonacci","floor","greatestCommonDivisor","hilbertMatrix","identityMatrix","imaginary","index","intersection","inverse","leastCommonMultiple","length","magicMatrix","maximum","mean","memory","minimum","minor","oneMatrix","permutation","prime","product","property","random","range","real","reciprocal","reducedRowEchelonForm","round","sign","sum","trace","transpose","truncation","type","union","zeroMatrix"],["commonBracket","matrixBracket","omitted","setBracket"]];const Types$3=helpers["Types"],Oplist=oplist,Order=require$$2$1;class LimeFunction$1i{constructor(t,{...e}){this.lime=t,this.mode=e.hasOwnProperty("mode")&&["l","r","b","n"].includes(e.mode)?e.mode:"x",this.name=e.hasOwnProperty("name")?e.name:this.constructor.name.slice(12),this.operations={},this.algorithms=new Map}get order(){for(let t=0;t<Order.length;t++)if(Order[t].includes(this.name))return t;throw new Error("issue:invalidFunctionOrder")}evaluate(r){if("x"===this.mode)throw new Error("error:unmatchedBrackets");const s=this.operations[this.mode];for(let i=0;i<s.length;i++){let t,e;if(Types$3.isString(s[i])&&(t="e"===s[i][0]?Oplist.cond[s[i].substring(1)]:Oplist.cond[Oplist.pair[s[i]][0]],e="e"===s[i][0]?this.algorithms.get(s[i].substring(1)):Oplist.act[Oplist.pair[s[i]][1]]),t(r)&&(e(r),"c"!==s[i][0]))return r}throw new Error("error:functionAgreement")}}var _function=LimeFunction$1i;const LimeFunction$1h=_function;class LimeFunctionAdd extends LimeFunction$1h{constructor(t,e){super(t,{name:"add",mode:e}),this.operations.b=["tz(_+)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","cb({int|rat}->comp,comp)","cb(comp,{int|rat}->comp)","eb(int,int)","eb(rat,rat)","eb(comp,comp)","eb(mat,mat)","eb(str,str)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("integer")(t.left.value+t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.build("rational")(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,"+",t.right.nPlace,"*",t.left.dPlace]),this.lime.direct([t.left.dPlace,"*",t.right.dPlace])))}),this.algorithms.set("b(comp,comp)",t=>{t.bs(this.lime.build("complex")(this.lime.direct([t.left.rPlace,"+",t.right.rPlace]),this.lime.direct([t.left.iPlace,"+",t.right.iPlace])))}),this.algorithms.set("b(mat,mat)",i=>{if(i.left.row!==i.right.row||i.left.column!==i.right.column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"+",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b(str,str)",t=>{t.bs(this.lime.direct(["concat","(",t.left,",",t.right,")"]))})}}var add=LimeFunctionAdd;const LimeFunction$1g=_function;class LimeFunctionDecimal extends LimeFunction$1g{constructor(t,e){super(t,{name:"decimal",mode:e}),this.operations.b=["eb(int,int)"],this.algorithms.set("b(int,int)",t=>{var e;0<t.right.value?(e=this.lime.direct([10,"^",t.right.string.length]),t.bs(this.lime.direct(["(",t.left,"*",e,"+",t.right,")","/",e]))):t.bs(t.left)})}}var decimal=LimeFunctionDecimal;const LimeFunction$1f=_function;class LimeFunctionDivide extends LimeFunction$1f{constructor(t,e){super(t,{name:"divide",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","cb({int|rat}->comp,comp)","cb(comp,{int|rat}->comp)","eb(int,int)","eb(rat,rat)","eb(comp,comp)"],this.algorithms.set("b(int,int)",t=>{t.left.value%t.right.value==0?t.bs(this.lime.build("integer")(t.left.value/t.right.value)):t.bs(this.lime.build("rational")(t.left,t.right))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.build("rational")(this.lime.direct([t.left.nPlace,"*",t.right.dPlace]),this.lime.direct([t.left.dPlace,"*",t.right.nPlace])))}),this.algorithms.set("b(comp,comp)",t=>{t.bs(this.lime.build("complex")(this.lime.direct(["re","(",t.left,"*","conj","(",t.right,")",")","/","(",t.right,"*","conj","(",t.right,")",")"]),this.lime.direct(["im","(",t.left,"*","conj","(",t.right,")",")","/","(",t.right,"*","conj","(",t.right,")",")"])))})}}var divide=LimeFunctionDivide;const LimeFunction$1e=_function;class LimeFunctionExponent extends LimeFunction$1e{constructor(t,e){super(t,{name:"exponent",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,int)","eb(rat,int)"],this.algorithms.set("b(int,int)",t=>{if(0<=t.right.value){if(0===t.left.value&&0===t.right.value)throw new Error("warn:zeroExponentOfZero");t.bs(this.lime.build("integer")(t.left.value**t.right.value))}else t.bs(this.lime.build("rational")(this.lime.direct([1]),this.lime.direct([t.left,"^","-",t.right])))}),this.algorithms.set("b(rat,int)",t=>{0<=t.right.value?t.bs(this.lime.build("rational")(this.lime.direct([t.left.nPlace,"^",t.right]),this.lime.direct([t.left.dPlace,"^",t.right]))):t.bs(this.lime.build("rational")(this.lime.direct([t.left.dPlace,"^","-",t.right]),this.lime.direct([t.left.nPlace,"^","-",t.right])))})}}var exponent=LimeFunctionExponent;const LimeFunction$1d=_function;class LimeFunctionModulo extends LimeFunction$1d{constructor(t,e){super(t,{name:"modulo",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,int)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("integer")(t.left.value%t.right.value))})}}var modulo=LimeFunctionModulo;const LimeFunction$1c=_function;class LimeFunctionMultiply extends LimeFunction$1c{constructor(t,e){super(t,{name:"multiply",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","cb({int|rat}->comp,comp)","cb(comp,{int|rat}->comp)","eb(int,int)","eb(rat,rat)","eb(comp,comp)","eb(mat,mat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("integer")(t.left.value*t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.build("rational")(this.lime.direct([t.left.nPlace,"*",t.right.nPlace]),this.lime.direct([t.left.dPlace,"*",t.right.dPlace])))}),this.algorithms.set("b(comp,comp)",t=>{t.bs(this.lime.build("complex")(this.lime.direct([t.left.rPlace,"*",t.right.rPlace,"-",t.left.iPlace,"*",t.right.iPlace]),this.lime.direct([t.left.rPlace,"*",t.right.iPlace,"+",t.left.iPlace,"*",t.right.rPlace])))}),this.algorithms.set("b(mat,mat)",s=>{if(s.left.column!==s.right.row)throw new Error("error:invalidMatrixDimensions");const t=[];for(let r=0;r<s.left.row;r++){t.push([]);for(let i=0;i<s.right.column;i++){let e=this.lime.direct([0]);for(let t=0;t<s.right.row;t++)e=this.lime.direct([e,"+",s.left.places[r][t],"*",s.right.places[t][i]]);t[r].push(e)}}s.bs(this.lime.build("matrix")(t))})}}var multiply=LimeFunctionMultiply;const LimeFunction$1b=_function;class LimeFunctionNegative extends LimeFunction$1b{constructor(t,e){super(t,{name:"negative",mode:e}),this.operations.r=["tr(_!)","tr(_+)","tr(_-)","cr(var->expr)","cr(arg{expr[1]}->expr)","cr(bool->int)","er({comp|int|rat})","er(mat)","er(_+)","er(_-)"],this.algorithms.set("r({comp|int|rat})",t=>{t.rus(this.lime.direct([-1,"*",t.right]))}),this.algorithms.set("r(mat)",t=>{t.rus(this.lime.direct([-1,".*",t.right]))}),this.algorithms.set("r(_+)",t=>{t.rus(this.lime.refer("_-"))}),this.algorithms.set("r(_-)",t=>{t.rus(this.lime.refer("_+"))})}}var negative=LimeFunctionNegative;const LimeFunction$1a=_function;class LimeFunctionPositive extends LimeFunction$1a{constructor(t,e){super(t,{name:"positive",mode:e}),this.operations.r=["tr(_!)","tr(_+)","tr(_-)","cr(var->expr)","cr(arg{expr[1]}->expr)","cr(bool->int)","er({comp|int|rat})","er(mat)","er(_+)","er(_-)"],this.algorithms.set("r({comp|int|rat})",t=>{t.rus(this.lime.direct([1,"*",t.right]))}),this.algorithms.set("r(mat)",t=>{t.rus(this.lime.direct([1,".*",t.right]))}),this.algorithms.set("r(_+)",t=>{t.rus(this.lime.refer("_+"))}),this.algorithms.set("r(_-)",t=>{t.rus(this.lime.refer("_-"))})}}var positive=LimeFunctionPositive;const LimeFunction$19=_function;class LimeFunctionScalarAdd extends LimeFunction$19{constructor(t,e){super(t,{name:"scalarAdd",mode:e}),this.operations.b=["cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(mat,mat)","eb(mat,{comp|int|rat})","eb({comp|int|rat},mat)"],this.algorithms.set("b(mat,mat)",t=>{t.bs(this.lime.direct([t.left,"+",t.right]))}),this.algorithms.set("b(mat,{comp|int|rat})",i=>{const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"+",i.right]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b({comp|int|rat},mat)",i=>{const r=[];for(let e=0;e<i.right.row;e++){r.push([]);for(let t=0;t<i.right.column;t++)r[e].push(this.lime.direct([i.left,"+",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var scalarAdd=LimeFunctionScalarAdd;const LimeFunction$18=_function;class LimeFunctionScalarDivide extends LimeFunction$18{constructor(t,e){super(t,{name:"scalarDivide",mode:e}),this.operations.b=["cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(mat,mat)","eb(mat,{comp|int|rat})","eb({comp|int|rat},mat)"],this.algorithms.set("b(mat,mat)",i=>{if(i.left.row!==i.right.row||i.left.column!==i.right.column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"/",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b(mat,{comp|int|rat})",i=>{const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"/",i.right]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b({comp|int|rat},mat)",i=>{const r=[];for(let e=0;e<i.right.row;e++){r.push([]);for(let t=0;t<i.right.column;t++)r[e].push(this.lime.direct([i.left,"/",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var scalarDivide=LimeFunctionScalarDivide;const LimeFunction$17=_function;class LimeFunctionScalarExponent extends LimeFunction$17{constructor(t,e){super(t,{name:"scalarExponent",mode:e}),this.operations.b=["cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(mat,int)","eb(mat,mat)","eb({int|rat},mat)"],this.algorithms.set("b(mat,int)",i=>{const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"^",i.right]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b(mat,mat)",i=>{if(i.left.row!==i.right.row||i.left.column!==i.right.column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"^",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b({int|rat},mat)",i=>{const r=[];for(let e=0;e<i.right.row;e++){r.push([]);for(let t=0;t<i.right.column;t++)r[e].push(this.lime.direct([i.left,"^",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var scalarExponent=LimeFunctionScalarExponent;const LimeFunction$16=_function;class LimeFunctionScalarModulo extends LimeFunction$16{constructor(t,e){super(t,{name:"scalarModulo",mode:e}),this.operations.b=["cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,mat)","eb(mat,int)","eb(mat,mat)"],this.algorithms.set("b(int,mat)",i=>{const r=[];for(let e=0;e<i.right.row;e++){r.push([]);for(let t=0;t<i.right.column;t++)r[e].push(this.lime.direct([i.left,"%",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b(mat,int)",i=>{const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"%",i.right]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b(mat,mat)",i=>{if(i.left.row!==i.right.row||i.left.column!==i.right.column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"%",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var scalarModulo=LimeFunctionScalarModulo;const LimeFunction$15=_function;class LimeFunctionScalarMultiply extends LimeFunction$15{constructor(t,e){super(t,{name:"scalarMultiply",mode:e}),this.operations.b=["cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(mat,mat)","eb(mat,{comp|int|rat})","eb({comp|int|rat},mat)"],this.algorithms.set("b(mat,mat)",i=>{if(i.left.row!==i.right.row||i.left.column!==i.right.column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"*",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b(mat,{comp|int|rat})",i=>{const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"*",i.right]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b({comp|int|rat},mat)",i=>{const r=[];for(let e=0;e<i.right.row;e++){r.push([]);for(let t=0;t<i.right.column;t++)r[e].push(this.lime.direct([i.left,"*",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var scalarMultiply=LimeFunctionScalarMultiply;const LimeFunction$14=_function;class LimeFunctionScalarSubtract extends LimeFunction$14{constructor(t,e){super(t,{name:"scalarSubtract",mode:e}),this.operations.b=["cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(mat,mat)","eb(mat,{comp|int|rat})","eb({comp|int|rat},mat)"],this.algorithms.set("b(mat,mat)",t=>{t.bs(this.lime.direct([t.left,"-",t.right]))}),this.algorithms.set("b(mat,{comp|int|rat})",i=>{const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"-",i.right]))}i.bs(this.lime.build("matrix")(r))}),this.algorithms.set("b({comp|int|rat},mat)",i=>{const r=[];for(let e=0;e<i.right.row;e++){r.push([]);for(let t=0;t<i.right.column;t++)r[e].push(this.lime.direct([i.left,"-",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var scalarSubtract=LimeFunctionScalarSubtract;const LimeFunction$13=_function;class LimeFunctionSubtract extends LimeFunction$13{constructor(t,e){super(t,{name:"subtract",mode:e}),this.operations.b=["tz(_-)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","cb({int|rat}->comp,comp)","cb(comp,{int|rat}->comp)","eb(int,int)","eb(rat,rat)","eb(comp,comp)","eb(mat,mat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("integer")(t.left.value-t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.build("rational")(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,"-",t.right.nPlace,"*",t.left.dPlace]),this.lime.direct([t.left.dPlace,"*",t.right.dPlace])))}),this.algorithms.set("b(comp,comp)",t=>{t.bs(this.lime.build("complex")(this.lime.direct([t.left.rPlace,"-",t.right.rPlace]),this.lime.direct([t.left.iPlace,"-",t.right.iPlace])))}),this.algorithms.set("b(mat,mat)",i=>{if(i.left.row!==i.right.row||i.left.column!==i.right.column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.left.row;e++){r.push([]);for(let t=0;t<i.left.column;t++)r[e].push(this.lime.direct([i.left.places[e][t],"-",i.right.places[e][t]]))}i.bs(this.lime.build("matrix")(r))})}}var subtract=LimeFunctionSubtract;const LimeFunction$12=_function;class LimeFunctionBitwiseAnd extends LimeFunction$12{constructor(t,e){super(t,{name:"bitwiseAnd",mode:e}),this.operations.b=["tf(&&)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,int)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.direct([t.left.value&t.right.value]))})}}var bitwiseAnd=LimeFunctionBitwiseAnd;const LimeFunction$11=_function;class LimeFunctionBitwiseNot extends LimeFunction$11{constructor(t,e){super(t,{name:"bitwiseNot",mode:e}),this.operations.r=["tr(_!)","tr(_+)","tr(_-)","cr(var->expr)","cr(arg{expr[1]}->expr)","cr(bool->int)","er(int)"],this.algorithms.set("r(int)",t=>{t.rus(this.lime.direct([~t.right.value]))})}}var bitwiseNot=LimeFunctionBitwiseNot;const LimeFunction$10=_function;class LimeFunctionBitwiseOr extends LimeFunction$10{constructor(t,e){super(t,{name:"bitwiseOr",mode:e}),this.operations.b=["tf(||)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,int)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.direct([t.left.value|t.right.value]))})}}var bitwiseOr=LimeFunctionBitwiseOr;const LimeFunction$$=_function;class LimeFunctionShiftLeft extends LimeFunction$${constructor(t,e){super(t,{name:"shiftLeft",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,int)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.direct([t.left.value<<t.right.value]))})}}var shiftLeft=LimeFunctionShiftLeft;const LimeFunction$_=_function;class LimeFunctionShiftRight extends LimeFunction$_{constructor(t,e){super(t,{name:"shiftRight",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","eb(int,int)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.direct([t.left.value>>t.right.value]))})}}var shiftRight=LimeFunctionShiftRight;const LimeFunction$Z=_function;class LimeFunctionEqual extends LimeFunction$Z{constructor(t,e){super(t,{name:"equal",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","eb(int,int)","eb(rat,rat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("boolean")(t.left.value===t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,"==",t.right.nPlace,"*",t.left.dPlace]))})}}var equal=LimeFunctionEqual;const LimeFunction$Y=_function;class LimeFunctionGreater extends LimeFunction$Y{constructor(t,e){super(t,{name:"greater",mode:e}),this.operations.b=["tf(>=)","tf(>>)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","eb(int,int)","eb(rat,rat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("boolean")(t.left.value>t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,">",t.right.nPlace,"*",t.left.dPlace]))})}}var greater=LimeFunctionGreater;const LimeFunction$X=_function;class LimeFunctionGreaterEqual extends LimeFunction$X{constructor(t,e){super(t,{name:"greaterEqual",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","eb(int,int)","eb(rat,rat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("boolean")(t.left.value>=t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,">=",t.right.nPlace,"*",t.left.dPlace]))})}}var greaterEqual=LimeFunctionGreaterEqual;const LimeFunction$W=_function;class LimeFunctionNotEqual extends LimeFunction$W{constructor(t,e){super(t,{name:"notEqual",mode:e}),this.operations.b=["tf(!==)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","eb(int,int)","eb(rat,rat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("boolean")(t.left.value!==t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,"!=",t.right.nPlace,"*",t.left.dPlace]))})}}var notEqual=LimeFunctionNotEqual;const LimeFunction$V=_function;class LimeFunctionSmaller extends LimeFunction$V{constructor(t,e){super(t,{name:"smaller",mode:e}),this.operations.b=["tf(<=)","tf(<<)","tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","eb(int,int)","eb(rat,rat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("boolean")(t.left.value<t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,"<",t.right.nPlace,"*",t.left.dPlace]))})}}var smaller=LimeFunctionSmaller;const LimeFunction$U=_function;class LimeFunctionSmallerEqual extends LimeFunction$U{constructor(t,e){super(t,{name:"smallerEqual",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl(bool->int)","cr(bool->int)","cb(int->rat,rat)","cb(rat,int->rat)","eb(int,int)","eb(rat,rat)"],this.algorithms.set("b(int,int)",t=>{t.bs(this.lime.build("boolean")(t.left.value<=t.right.value))}),this.algorithms.set("b(rat,rat)",t=>{t.bs(this.lime.direct([t.left.nPlace,"*",t.right.dPlace,"<=",t.right.nPlace,"*",t.left.dPlace]))})}}var smallerEqual=LimeFunctionSmallerEqual;const LimeFunction$T=_function;class LimeFunctionConjugate extends LimeFunction$T{constructor(t,e){super(t,{name:"conjugate",mode:e}),this.operations.r=["cr(arg{{int|rat}[$]}->arg{comp[$]})","er(arg{comp[1]})"],this.algorithms.set("r(arg{comp[1]})",t=>{t.rus(this.lime.build("complex")(t.right.places[0].rPlace,this.lime.direct(["-",t.right.places[0].iPlace])))})}}var conjugate=LimeFunctionConjugate;const LimeFunction$S=_function;class LimeFunctionImaginary extends LimeFunction$S{constructor(t,e){super(t,{name:"imaginary",mode:e}),this.operations.r=["cr(arg{{int|rat}[$]}->arg{comp[$]})","er(arg{comp[1]})"],this.algorithms.set("r(arg{comp[1]})",t=>{t.rus(this.lime.direct([t.right.places[0].iPlace]))})}}var imaginary=LimeFunctionImaginary;const LimeFunction$R=_function;class LimeFunctionReal extends LimeFunction$R{constructor(t,e){super(t,{name:"real",mode:e}),this.operations.r=["cr(arg{{int|rat}[$]}->arg{comp[$]})","er(arg{comp[1]})"],this.algorithms.set("r(arg{comp[1]})",t=>{t.rus(this.lime.direct([t.right.places[0].rPlace]))})}}var real=LimeFunctionReal;const LimeFunction$Q=_function;class LimeFunctionCombination extends LimeFunction$Q{constructor(t,e){super(t,{name:"combination",mode:e}),this.operations.r=["er(arg{int[2]})"],this.algorithms.set("r(arg{int[2]})",t=>{var[e,i]=t.right.places;if(e.value<0||i.value<0)throw new Error("warn:negativePermutation");t.rus(this.lime.direct(["npr","(",e,",",i,")","/","npr","(",i,",",i,")"]))})}}var combination=LimeFunctionCombination;const LimeFunction$P=_function;class LimeFunctionFactorial extends LimeFunction$P{constructor(t,e){super(t,{name:"factorial",mode:e}),this.operations.l=["tz(_!)","tf(!=)","cl(var->expr)","cl(arg{expr[1]}->expr)","cl(bool->int)","el(int)"],this.algorithms.set("l(int)",t=>{if(t.left.value<0)throw new Error("warn:negativeFactorial");0<t.left.value?t.lus(this.lime.direct([t.left,"*","(",t.left,"-",1,")","!"])):t.lus(this.lime.direct([1]))})}}var factorial=LimeFunctionFactorial;const LimeFunction$O=_function;class LimeFunctionPermutation extends LimeFunction$O{constructor(t,e){super(t,{name:"permutation",mode:e}),this.operations.r=["er(arg{int[2]})"],this.algorithms.set("r(arg{int[2]})",t=>{var[e,i]=t.right.places;if(e.value<0||i.value<0)throw new Error("warn:negativePermutation");e.value<i.value?t.rus(this.lime.direct([0])):t.rus(this.lime.direct([e,"!","/","(",e,"-",i,")","!"]))})}}var permutation=LimeFunctionPermutation;const LimeFunction$N=_function;class LimeFunctionLogicalAnd extends LimeFunction$N{constructor(t,e){super(t,{name:"logicalAnd",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl({comp|int|rat}->bool)","cr({comp|int|rat}->bool)","eb(bool,bool)"],this.algorithms.set("b(bool,bool)",t=>{t.bs(this.lime.build("boolean")(t.left.value&&t.right.value))})}}var logicalAnd=LimeFunctionLogicalAnd;const LimeFunction$M=_function;class LimeFunctionLogicalNot extends LimeFunction$M{constructor(t,e){super(t,{name:"logicalNot",mode:e}),this.operations.r=["tr(_!)","tr(_+)","tr(_-)","cr(var->expr)","cr(arg{expr[1]}->expr)","cr({comp|int|rat}->bool)","er(bool)"],this.algorithms.set("r(bool)",t=>{t.rus(this.lime.build("boolean")(!t.right.value))})}}var logicalNot=LimeFunctionLogicalNot;const LimeFunction$L=_function;class LimeFunctionLogicalOr extends LimeFunction$L{constructor(t,e){super(t,{name:"logicalOr",mode:e}),this.operations.b=["tr(_!)","tr(_+)","tr(_-)","cl(var->expr)","cr(var->expr)","cl(arg{expr[1]}->expr)","cr(arg{expr[1]}->expr)","cl({comp|int|rat}->bool)","cr({comp|int|rat}->bool)","eb(bool,bool)"],this.algorithms.set("b(bool,bool)",t=>{t.bs(this.lime.build("boolean")(t.left.value||t.right.value))})}}var logicalOr=LimeFunctionLogicalOr;const LimeFunction$K=_function;class LimeFunctionAdjoint extends LimeFunction$K{constructor(t,e){super(t,{name:"adjoint",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{t.rus(this.lime.direct(["transpose","(","cof","(",t.right.places[0],")",")"]))})}}var adjoint=LimeFunctionAdjoint;const LimeFunction$J=_function;class LimeFunctionCofactor extends LimeFunction$J{constructor(t,e){super(t,{name:"cofactor",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{var i=t.right.places[0];const r=[];for(let e=0;e<i.column;e++){r.push([]);for(let t=0;t<i.row;t++)r[e].push(this.lime.direct(["det","(","minor","(",i,",",e+1,",",t+1,")",")","*",(t+e)%2?-1:1]))}t.rus(this.lime.build("matrix")(r))})}}var cofactor=LimeFunctionCofactor;const LimeFunction$I=_function;class LimeFunctionDeterminant extends LimeFunction$I{constructor(t,e){super(t,{name:"determinant",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{var e=t.right.places[0];if(e.row!==e.column)throw new Error("error:invalidMatrixDimensions");let i=this.lime.direct([0]);if(1<e.row)for(let t=0;t<e.row;t++)i=this.lime.direct([i,t%2?"-":"+",e.places[0][t],"*","det","(","minor","(",e,",",1,",",t+1,")",")"]);else i=this.lime.direct([i,"+",e.places[0][0]]);t.rus(i)})}}var determinant=LimeFunctionDeterminant;const LimeFunction$H=_function;class LimeFunctionHilbertMatrix extends LimeFunction$H{constructor(t,e){super(t,{name:"hilbertMatrix",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var i=t.right.value[0];const r=[];for(let e=0;e<i;e++){r.push([]);for(let t=0;t<i;t++)r[e].push(this.lime.direct([1,"/",t+e+1]))}t.rus(this.lime.build("matrix")(r))})}}var hilbertMatrix=LimeFunctionHilbertMatrix;const LimeFunction$G=_function;class LimeFunctionIdentityMatrix extends LimeFunction$G{constructor(t,e){super(t,{name:"identityMatrix",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var i=t.right.value[0];const r=[];for(let e=0;e<i;e++){r.push([]);for(let t=0;t<i;t++)r[e].push(this.lime.direct([t===e?1:0]))}t.rus(this.lime.build("matrix")(r))})}}var identityMatrix=LimeFunctionIdentityMatrix;const LimeFunction$F=_function;class LimeFunctionIndex extends LimeFunction$F{constructor(t,e){super(t,{name:"index",mode:e}),this.operations.r=["er(arg{mat[1],int[1]})","er(arg{mat[1],int[2]})"],this.algorithms.set("r(arg{mat[1],int[1]})",t=>{if(t.right.value[1]<=0||t.right.value[1]>t.right.places[0].size)throw new Error("error:invalidMatrixDimensions");var e=Math.floor((t.right.value[1]-1)/t.right.places[0].column),i=(t.right.value[1]-1)%t.right.places[0].column;t.rus(t.right.places[0].places[e][i])}),this.algorithms.set("r(arg{mat[1],int[2]})",t=>{if(t.right.value[1]<=0||t.right.value[1]>t.right.places[0].row||t.right.value[2]<=0||t.right.value[2]>t.right.places[0].column)throw new Error("error:invalidMatrixDimensions");t.rus(t.right.places[0].places[t.right.value[1]-1][t.right.value[2]-1])})}}var matrix=LimeFunctionIndex;const LimeFunction$E=_function;class LimeFunctionInverse extends LimeFunction$E{constructor(t,e){super(t,{name:"inverse",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{var e=this.lime.direct(["det","(",t.right.places[0],")"]);if(0===e.value)throw new Error("warn:zeroMatrixDeterminant");t.rus(this.lime.direct(["adj","(",t.right.places[0],")","./",e]))})}}var inverse=LimeFunctionInverse;const LimeFunction$D=_function;class LimeFunctionMagicMatrix extends LimeFunction$D{constructor(t,e){super(t,{name:"magicMatrix",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var r=t.right.value[0];const n=this.lime.direct(["zeromat","(",r,")"])["places"];if(r%2==1){let t=0,e=Math.floor(r/2),i=1;for(;i<=r*r;)n[e++][t--]=this.lime.direct([i]),i++%r==0?(t+=2,e--):e===r?e-=r:t<0&&(t+=r)}else if(r%4==2){if(2===r)throw new Error("warn:magicMatrixDimensionTwo");var i=r/2,s=this.lime.direct(["magicmat","(",i,")"]).places;for(let e=0;e<i;e++)for(let t=0;t<i;t++)n[e][t]=this.lime.direct([s[e][t]]),n[e+i][t]=this.lime.direct([s[e][t],"+",3*i*i]),n[e][t+i]=this.lime.direct([s[e][t],"+",2*i*i]),n[e+i][t+i]=this.lime.direct([s[e][t],"+",i*i]);const a=[];var e=(r-2)/4;for(let t=0;t<e;t++)a.push(t+1);for(let t=r-e+1;t<r;t++)a.push(t+1);var o=(r,s)=>(t,e)=>{var i=n[s][r];n[s][r]=n[e][t],n[e][t]=i};for(let e=0;e<i;e++)for(let t=0;t<a.length;t++)o(a[t]-1,e)(a[t]-1,e+i);o(0,e)(0,e+i),o(e,e)(e,e+i)}else{const l=[];for(let e=0;e<r;e++){l.push([]);for(let t=0;t<r;t++)l[e].push(this.lime.direct([Math.floor((e+1)%4/2)])),n[e][t]=this.lime.direct([e*r+t+1])}for(let e=0;e<r;e++)for(let t=0;t<r;t++)l[e][t].value===l[t][e].value&&(n[e][t]=this.lime.direct([r*r+1,"-",n[e][t]]))}t.rus(this.lime.build("matrix")(n))})}}var magicMatrix=LimeFunctionMagicMatrix;const LimeFunction$C=_function;class LimeFunctionMinor extends LimeFunction$C{constructor(t,e){super(t,{name:"minor",mode:e}),this.operations.r=["er(arg{mat[1],int[2]})"],this.algorithms.set("r(arg{mat[1],int[2]})",i=>{if(i.right.value[1]<=0||i.right.value[1]>i.right.places[0].row||i.right.value[2]<=0||i.right.value[2]>i.right.places[0].column)throw new Error("error:invalidMatrixDimensions");const r=[];for(let e=0;e<i.right.places[0].row;e++)if(e!==i.right.value[1]-1){r.push([]);for(let t=0;t<i.right.places[0].column;t++)t!==i.right.value[2]-1&&r[r.length-1].push(i.right.places[0].places[e][t])}i.rus(this.lime.build("matrix")(r))})}}var minor$1=LimeFunctionMinor;const LimeFunction$B=_function;class LimeFunctionOneMatrix extends LimeFunction$B{constructor(t,e){super(t,{name:"oneMatrix",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{int[2]})"],this.algorithms.set("r(arg{int[1]})",t=>{var i=t.right.value[0];const r=[];for(let e=0;e<i;e++){r.push([]);for(let t=0;t<i;t++)r[e].push(this.lime.direct([1]))}t.rus(this.lime.build("matrix")(r))}),this.algorithms.set("r(arg{int[2]})",t=>{var[i,r]=t.right.value;const s=[];for(let e=0;e<i;e++){s.push([]);for(let t=0;t<r;t++)s[e].push(this.lime.direct([1]))}t.rus(this.lime.build("matrix")(s))})}}var oneMatrix=LimeFunctionOneMatrix;const LimeFunction$A=_function;class LimeFunctionReducedRowEchelonForm extends LimeFunction$A{constructor(t,e){super(t,{name:"reducedRowEchelonForm",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{const i=t.right.places[0];let e=0,r=i.row;for(;e<r;)i.places[e].every(t=>this.lime.direct([t,"==",0]).value)?i.places.splice(--r,0,...i.places.splice(e,1)):e++;let s=e=0,n=0;for(;s<i.column&&n<r;)if(e>=r)s++,e=n;else if(this.lime.direct([i.places[e][s],"!=",0]).value){i.places.splice(n,0,...i.places.splice(e,1)),i.places[n]=i.places[n].map(t=>this.lime.direct([t,"/",i.places[n][s]]));for(let e=0;e<r;e++)if(e!==n){var o=i.places[e][s];for(let t=s;t<i.column;t++)i.places[e][t]=this.lime.direct([i.places[e][t],"-",i.places[n][t],"*",o])}n++,e=r}else e++;const a=[];for(let e=0;e<i.row;e++){a.push([]);for(let t=0;t<i.column;t++)a[e].push(i.places[e][t])}t.rus(this.lime.build("matrix")(a))})}}var reducedRowEchelonForm=LimeFunctionReducedRowEchelonForm;const LimeFunction$z=_function;class LimeFunctionTrace extends LimeFunction$z{constructor(t,e){super(t,{name:"trace",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{var e=t.right.places[0];if(e.row!==e.column)throw new Error("error:invalidMatrixDimensions");let i=this.lime.direct([0]);for(let t=0;t<e.row;t++)i=this.lime.direct([i,"+",e.places[t][t]]);t.rus(i)})}}var trace=LimeFunctionTrace;const LimeFunction$y=_function;class LimeFunctionTranspose extends LimeFunction$y{constructor(t,e){super(t,{name:"transpose",mode:e}),this.operations.r=["er(arg{mat[1]})"],this.algorithms.set("r(arg{mat[1]})",t=>{var i=t.right.places[0];const r=[];for(let e=0;e<i.column;e++){r.push([]);for(let t=0;t<i.row;t++)r[e].push(this.lime.direct([i.places[t][e]]))}t.rus(this.lime.build("matrix")(r))})}}var transpose$1=LimeFunctionTranspose;const LimeFunction$x=_function;class LimeFunctionZeroMatrix extends LimeFunction$x{constructor(t,e){super(t,{name:"zeroMatrix",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{int[2]})"],this.algorithms.set("r(arg{int[1]})",t=>{var i=t.right.value[0];const r=[];for(let e=0;e<i;e++){r.push([]);for(let t=0;t<i;t++)r[e].push(this.lime.direct([0]))}t.rus(this.lime.build("matrix")(r))}),this.algorithms.set("r(arg{int[2]})",t=>{var[i,r]=t.right.value;const s=[];for(let e=0;e<i;e++){s.push([]);for(let t=0;t<r;t++)s[e].push(this.lime.direct([0]))}t.rus(this.lime.build("matrix")(s))})}}var zeroMatrix=LimeFunctionZeroMatrix;const LimeFunction$w=_function;class LimeFunctionAbsolute extends LimeFunction$w{constructor(t,e){super(t,{name:"absolute",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{rat[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct([Math.abs(t.right.value[0])]))}),this.algorithms.set("r(arg{rat[1]})",t=>{t.rus(this.lime.direct([Math.abs(t.right.value[0].n),"/",Math.abs(t.right.value[0].d)]))})}}var absolute=LimeFunctionAbsolute;const LimeFunction$v=_function;class LimeFunctionCeiling extends LimeFunction$v{constructor(t,e){super(t,{name:"ceiling",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{rat[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct([t.right.value[0]]))}),this.algorithms.set("r(arg{rat[1]})",t=>{t.rus(this.lime.direct([Math.ceil(t.right.value[0].n/t.right.value[0].d)]))})}}var ceiling=LimeFunctionCeiling;const LimeFunction$u=_function;class LimeFunctionFactor extends LimeFunction$u{constructor(t,e){super(t,{name:"factor",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var e=t.right.value[0];if(e<1)throw new Error("warn:invalidNumberFactor");const i=[1];for(let t=2;t<=e;t++)e%t==0&&i.push(t);t.rus(this.lime.build("matrix")([i.map(t=>this.lime.direct([t]))]))})}}var factor$1=LimeFunctionFactor;const LimeFunction$t=_function;class LimeFunctionFibonacci extends LimeFunction$t{constructor(t,e){super(t,{name:"fibonacci",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var e=t.right.value[0];if(e<1)throw new Error("error:invalidSequenceIndex");this.lime.store.hasOwnProperty("fibonacci")||(this.lime.store.fibonacci=[1,1]);const i=[...this.lime.store.fibonacci];for(;i.length<e;)i.push(i[i.length-2]+i[i.length-1]);this.lime.store.fibonacci=[...i],t.rus(this.lime.direct([i[e-1]]))})}}var fibonacci$1=LimeFunctionFibonacci;const LimeFunction$s=_function;class LimeFunctionFloor extends LimeFunction$s{constructor(t,e){super(t,{name:"floor",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{rat[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct([t.right.value[0]]))}),this.algorithms.set("r(arg{rat[1]})",t=>{t.rus(this.lime.direct([Math.floor(t.right.value[0].n/t.right.value[0].d)]))})}}var floor$1=LimeFunctionFloor;const LimeFunction$r=_function;class LimeFunctionGreatestCommonDivisor extends LimeFunction$r{constructor(t,e){super(t,{name:"greatestCommonDivisor",mode:e}),this.operations.r=["er(arg{int[2]})"],this.algorithms.set("r(arg{int[2]})",t=>{let e=t.right.value[0],i=t.right.value[1];for(;0!==i;){var r=i;i=e%i,e=r}t.rus(this.lime.direct([e]))})}}var greatestCommonDivisor=LimeFunctionGreatestCommonDivisor;const LimeFunction$q=_function;class LimeFunctionLeastCommonMultiple extends LimeFunction$q{constructor(t,e){super(t,{name:"leastCommonMultiple",mode:e}),this.operations.r=["er(arg{int[2]})"],this.algorithms.set("r(arg{int[2]})",t=>{var e=t.right.value[0],i=t.right.value[1];t.rus(this.lime.direct([e,"*",i,"/","gcd","(",e,",",i,")"]))})}}var leastCommonMultiple=LimeFunctionLeastCommonMultiple;const LimeFunction$p=_function;class LimeFunctionPrime extends LimeFunction$p{constructor(t,e){super(t,{name:"prime",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var e=t.right.value[0];if(e<1)throw new Error("error:invalidSequenceIndex");this.lime.store.hasOwnProperty("prime")||(this.lime.store.prime=[2]);const i=[...this.lime.store.prime];let r=i[i.length-1]+1;for(;i.length<e;)i.every(t=>r%t!=0)&&i.push(r),r++;this.lime.store.prime=[...i],t.rus(this.lime.direct([i[e-1]]))})}}var prime$1=LimeFunctionPrime;const LimeFunction$o=_function;class LimeFunctionReciprocal extends LimeFunction$o{constructor(t,e){super(t,{name:"reciprocal",mode:e}),this.operations.r=["er(arg{expr[1]})"],this.algorithms.set("r(arg{expr[1]})",t=>{t.rus(this.lime.direct([1,"/",t.right.places[0]]))})}}var reciprocal$1=LimeFunctionReciprocal;const LimeFunction$n=_function;class LimeFunctionRound extends LimeFunction$n{constructor(t,e){super(t,{name:"round",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{rat[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct([t.right.value[0]]))}),this.algorithms.set("r(arg{rat[1]})",t=>{t.rus(this.lime.direct([Math.round(t.right.value[0].n/t.right.value[0].d)]))})}}var round$1=LimeFunctionRound;const LimeFunction$m=_function;class LimeFunctionSign extends LimeFunction$m{constructor(t,e){super(t,{name:"sign",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{rat[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct([Math.sign(t.right.value[0])]))}),this.algorithms.set("r(arg{rat[1]})",t=>{t.rus(this.lime.direct([Math.sign(t.right.value[0].n/t.right.value[0].d)]))})}}var sign=LimeFunctionSign;const LimeFunction$l=_function;class LimeFunctionTruncation extends LimeFunction$l{constructor(t,e){super(t,{name:"truncation",mode:e}),this.operations.r=["er(arg{int[1]})","er(arg{rat[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct([t.right.value[0]]))}),this.algorithms.set("r(arg{rat[1]})",t=>{t.rus(this.lime.direct([Math.trunc(t.right.value[0].n/t.right.value[0].d)]))})}}var truncation=LimeFunctionTruncation;const LimeFunction$k=_function;class LimeFunctionIntersection extends LimeFunction$k{constructor(t,e){super(t,{name:"intersection",mode:e}),this.operations.r=["er(arg{set[2]})"],this.algorithms.set("r(arg{set[2]})",t=>{const i=t.right.places[0],r=t.right.places[1],s=[];for(let e=0;e<i.length;e++)r.places.some(t=>this.lime.direct([i.places[e],"==",t]).value)&&s.push(i.places[e]);t.rus(this.lime.build("set")(...s))})}}var intersection$1=LimeFunctionIntersection;const LimeFunction$j=_function;class LimeFunctionUnion extends LimeFunction$j{constructor(t,e){super(t,{name:"union",mode:e}),this.operations.r=["er(arg{set[2]})"],this.algorithms.set("r(arg{set[2]})",t=>{const i=t.right.places.map(t=>t.places).flat(),r=this.lime.direct(["intersection","(",t.right.places[0],",",t.right.places[1],")"]).places;for(let e=0;e<i.length;e++)r.some(t=>this.lime.direct([i[e],"==",t]).value)&&i.splice(e,1);t.rus(this.lime.build("set")(...i,...r))})}}var union$1=LimeFunctionUnion;const LimeFunction$i=_function;class LimeFunctionMaximum extends LimeFunction$i{constructor(t,e){super(t,{name:"maximum",mode:e}),this.operations.r=["er(arg{expr[@]})"],this.algorithms.set("r(arg{expr[@]})",e=>{let i=0;for(let t=1;t<e.right.length;t++)i=this.lime.direct([e.right.places[t],">",e.right.places[i]]).value?t:i;e.rus(this.lime.direct([e.right.places[i]]))})}}var maximum=LimeFunctionMaximum;const LimeFunction$h=_function;class LimeFunctionMean extends LimeFunction$h{constructor(t,e){super(t,{name:"mean",mode:e}),this.operations.r=["er(arg{expr[@]})"],this.algorithms.set("r(arg{expr[@]})",t=>{t.rus(this.lime.direct(["sum",t.right,"/",t.right.length]))})}}var mean$1=LimeFunctionMean;const LimeFunction$g=_function;class LimeFunctionMinimum extends LimeFunction$g{constructor(t,e){super(t,{name:"minimum",mode:e}),this.operations.r=["er(arg{expr[@]})"],this.algorithms.set("r(arg{expr[@]})",e=>{let i=0;for(let t=1;t<e.right.length;t++)i=this.lime.direct([e.right.places[t],"<",e.right.places[i]]).value?t:i;e.rus(this.lime.direct([e.right.places[i]]))})}}var minimum=LimeFunctionMinimum;const LimeFunction$f=_function;class LimeFunctionProduct extends LimeFunction$f{constructor(t,e){super(t,{name:"product",mode:e}),this.operations.r=["er(arg{expr[@]})"],this.algorithms.set("r(arg{expr[@]})",e=>{let i=e.right.places[0];for(let t=1;t<e.right.length;t++)i=this.lime.direct([i,"*",e.right.places[t]]);e.rus(this.lime.direct([i]))})}}var product=LimeFunctionProduct;const LimeFunction$e=_function;class LimeFunctionRandom extends LimeFunction$e{constructor(t,e){super(t,{name:"random",mode:e}),this.operations.r=["er(arg{})","er(arg{int[1]})","er(arg{int[2]})"],this.algorithms.set("r(arg{})",t=>{t.rus(this.lime.direct([Math.floor(1e15*Math.random()),"/",1e15]))}),this.algorithms.set("r(arg{int[1]})",t=>{t.rus(this.lime.direct(["rand","(",0,",",t.right.places[0],")"]))}),this.algorithms.set("r(arg{int[2]})",t=>{var[e,i]=t.right.places;if(this.lime.direct([e.value,">",i.value]).value)throw new Error("error:invalidArgumentLogic");t.rus(this.lime.direct([Math.floor(Math.random()*(i.value-e.value+1)+e.value)]))})}}var random=LimeFunctionRandom;const LimeFunction$d=_function;class LimeFunctionRange extends LimeFunction$d{constructor(t,e){super(t,{name:"range",mode:e}),this.operations.r=["er(arg{expr[@]})"],this.algorithms.set("r(arg{expr[@]})",t=>{t.rus(this.lime.direct(["max",t.right,"-","min",t.right]))})}}var range$1=LimeFunctionRange;const LimeFunction$c=_function;class LimeFunctionSum extends LimeFunction$c{constructor(t,e){super(t,{name:"sum",mode:e}),this.operations.r=["er(arg{expr[@]})"],this.algorithms.set("r(arg{expr[@]})",e=>{let i=e.right.places[0];for(let t=1;t<e.right.length;t++)i=this.lime.direct([i,"+",e.right.places[t]]);e.rus(this.lime.direct([i]))})}}var sum$1=LimeFunctionSum;const LimeFunction$b=_function;class LimeFunctionConcatenate extends LimeFunction$b{constructor(t,e){super(t,{name:"concatenate",mode:e}),this.operations.r=["er(arg{str[@]})"],this.algorithms.set("r(arg{str[@]})",t=>{t.rus(this.lime.build("string")(t.right.value[0].concat(...t.right.value.slice(1))))})}}var concatenate=LimeFunctionConcatenate;const LimeFunction$a=_function;class LimeFunctionLength extends LimeFunction$a{constructor(t,e){super(t,{name:"length",mode:e}),this.operations.r=["er(arg{str[1]})"],this.algorithms.set("r(arg{str[1]})",t=>{t.rus(this.lime.direct([t.right.value[0].length]))})}}var length=LimeFunctionLength;const LimeFunction$9=_function;class LimeFunctionAssign extends LimeFunction$9{constructor(t,e){super(t,{name:"assign",mode:e}),this.operations.b=["tf(==)","tr(_+)","tr(_-)","cr(var->expr)","cr(arg{expr[1]}->expr)","eb(var,expr)"],this.algorithms.set("b(var,expr)",t=>{this.lime.variables.set(t.left.key,t.right),t.bs(t.left)})}}var assign=LimeFunctionAssign;const LimeFunction$8=_function;class LimeFunctionColumnSplit extends LimeFunction$8{constructor(t,e){super(t,{name:"columnSplit",mode:e})}}var columnSplit=LimeFunctionColumnSplit;const LimeFunction$7=_function;class LimeFunctionCommonBracket extends LimeFunction$7{constructor(t,e){super(t,{name:"commonBracket",mode:e}),this.operations.n=["en()"],this.algorithms.set("n()",t=>{var e=t["data"];const i=[[]],r=[this];let s=t.pos,n=0;for(;s+1<e.length&&0<r.length;)if(this.lime.identify("commonBracket","matrixBracket","setBracket")(e[s+1])){if("n"===e[s+1].mode)r.push(e[s+1]);else{if(e[s+1].name!==r[r.length-1].name)throw new Error("error:unmatchedBrackets");if(r.pop(),0===r.length)break}i[n].push(e[++s])}else if(this.lime.identify("columnSplit")(e[s+1])&&1===r.length)i.push([]),n++,s++;else{if(this.lime.identify("rowSplit")(e[s+1])&&1===r.length)throw new Error("error:functionAgreement");i[n].push(e[++s])}if(0<r.length)throw new Error("error:unmatchedBrackets");const o=[];let a=2+n;for(let t=0;t<=n;t++)a+=i[t].length,o.push(0<i[t].length?this.lime.direct(i[t]):null);t.ns(a,this.lime.build("argument")(...o))})}}var commonBracket=LimeFunctionCommonBracket;const LimeFunction$6=_function;class LimeFunctionMatrixBracket extends LimeFunction$6{constructor(t,e){super(t,{name:"matrixBracket",mode:e}),this.operations.n=["en()"],this.algorithms.set("n()",t=>{var e=t["data"];const i=[[[]]],r=[this];let s=t.pos,n=0,o=0;for(;s+1<e.length&&0<r.length;)if(this.lime.identify("commonBracket","matrixBracket","setBracket")(e[s+1])){if("n"===e[s+1].mode)r.push(e[s+1]);else{if(e[s+1].name!==r[r.length-1].name)throw new Error("error:unmatchedBrackets");if(r.pop(),0===r.length)break}i[n][o].push(e[++s])}else if(this.lime.identify("columnSplit")(e[s+1])&&1===r.length)i[n].push([]),o++,s++;else if(this.lime.identify("rowSplit")(e[s+1])&&1===r.length){if(0<n&&i[n].length!==i[0].length)throw new Error("error:invalidArgumentLogic");i.push([[]]),n++,o=0,s++}else i[n][o].push(e[++s]);if(0<r.length)throw new Error("error:unmatchedBrackets");const a=[];let l=++n*++o+1;for(let e=0;e<n;e++){a.push([]);for(let t=0;t<o;t++)l+=i[e][t].length,a[e].push(0<i[e][t].length?this.lime.direct(i[e][t]):null)}t.ns(l,this.lime.build("matrix")(a))})}}var matrixBracket=LimeFunctionMatrixBracket;const LimeFunction$5=_function;class LimeFunctionProperty extends LimeFunction$5{constructor(t,e){super(t,{name:"property",mode:e}),this.operations.b=["tf(_.)","tf(.+)","tf(./)","tf(.^)","tf(.%)","tf(.*)","tf(.-)","eb(expr,str)"],this.algorithms.set("b(expr,str)",t=>{t.bs(t.left[t.right.value])})}}var property=LimeFunctionProperty;const LimeFunction$4=_function;class LimeFunctionOmitted extends LimeFunction$4{constructor(t,e){super(t,{name:"omitted",mode:e}),this.operations.b=["eb(mat,arg{int[1]})","eb(expr,expr)"],this.algorithms.set("b(mat,arg{int[1]})",t=>{t.bs(t.lime.direct(["index","(",t.left,",",t.right,")"]))}),this.algorithms.set("b(expr,expr)",t=>{t.fs(t.lime.refer("*"))})}}var omitted=LimeFunctionOmitted;const LimeFunction$3=_function;class LimeFunctionRowSplit extends LimeFunction$3{constructor(t,e){super(t,{name:"rowSplit",mode:e})}}var rowSplit=LimeFunctionRowSplit;const LimeFunction$2=_function;class LimeFunctionSetBracket extends LimeFunction$2{constructor(t,e){super(t,{name:"setBracket",mode:e}),this.operations.n=["en()"],this.algorithms.set("n()",t=>{var e=t["data"];const i=[[]],r=[this];let s=t.pos,n=0;for(;s+1<e.length&&0<r.length;)if(this.lime.identify("commonBracket","matrixBracket","setBracket")(e[s+1])){if("n"===e[s+1].mode)r.push(e[s+1]);else{if(e[s+1].name!==r[r.length-1].name)throw new Error("error:unmatchedBrackets");if(r.pop(),0===r.length)break}i[n].push(e[++s])}else if(this.lime.identify("columnSplit")(e[s+1])&&1===r.length)i.push([]),n++,s++;else{if(this.lime.identify("rowSplit")(e[s+1])&&1===r.length)throw new Error("error:functionAgreement");i[n].push(e[++s])}if(0<r.length)throw new Error("error:unmatchedBrackets");const o=[];let a=2+n;for(let t=0;t<=n;t++)a+=i[t].length,o.push(0<i[t].length?this.lime.direct(i[t]):null);t.ns(a,this.lime.build("set")(...o))})}}var setBracket=LimeFunctionSetBracket;const LimeFunction$1=_function;class LimeFunctionMemory extends LimeFunction$1{constructor(t,e){super(t,{name:"memory",mode:e}),this.operations.r=["er(arg{int[1]})"],this.algorithms.set("r(arg{int[1]})",t=>{var e=this.lime.memory,i=t.right.value[0]-1;if(i<0||i>=e.length)throw new Error("error:invalidMemoryIndex");t.rus(e[i].result[0])})}}var memory=LimeFunctionMemory;const LimeFunction=_function;class LimeFunctionType extends LimeFunction{constructor(t,e){super(t,{name:"type",mode:e}),this.operations.r=["er(arg{expr[1]})"],this.algorithms.set("r(arg{expr[1]})",t=>{t.rus(this.lime.build("string")(t.right.places[0].name))})}}var type$1=LimeFunctionType;class LimeEquation{constructor(t,e){this.lime=t,this.input=e,this.solution=[]}get steps(){return this.solution.length}get runtime(){return this.solution[this.steps-1].timestamp-this.solution[0].timestamp}get result(){return this.solution[this.steps-1].data}record(t){this.lime.config.promptShowSteps&&console.log(t.data),this.solution.push(t)}}var equation=LimeEquation;const Types$2=helpers["Types"];class LimeStep{constructor(t,e,i){this.lime=t,this.data=Types$2.isArray(e)?e:[],this.pos=Types$2.isNumber(i)&&0<=i&&i<this.data.length?i:-1,this.timestamp=Date.now()}get left(){return this.data[this.pos-1]}get func(){return this.data[this.pos]}get right(){return this.data[this.pos+1]}ci(...e){return(...t)=>this.lime.identify(...e)(...t)}lpi(...t){return this.lime.identify(...t)(this.left)}fi(...t){return this.lime.identify(...t)(this.func)}rpi(...t){return this.lime.identify(...t)(this.right)}bpi(...t){return this.lime.identify(...t)(this.left,this.right)}lps(...t){this.data.splice(this.pos-1,1,...t)}fs(...t){this.data.splice(this.pos,1,...t)}rps(...t){this.data.splice(this.pos+1,1,...t)}lus(...t){this.data.splice(this.pos-1,2,...t)}rus(...t){this.data.splice(this.pos,2,...t)}bs(...t){this.data.splice(this.pos-1,3,...t)}ns(t,...e){this.data.splice(this.pos,t,...e)}}var step=LimeStep;const Types$1=helpers["Types"];class LimeToken{constructor(t,e,i){this.lime=t,this.type=["integer","whitespace","symbol","variable"].includes(e)?e:"symbol",this.value=Types$1.isString(i)?i:""}}var token=LimeToken;const Compiler=compiler,Module$1=new Map([].concat(Compiler.cmd([["about",about$1],["clear",clear$1],["config",config$1],["help",help$1],["list",list$1]]),Compiler.expr([["argument",argument],["boolean",boolean],["complex",complex],["integer",integer],["matrix",matrix$1],["rational",rational],["set",set],["string",string],["variable",variable]]),Compiler.func([["add",add],["decimal",decimal],["divide",divide],["exponent",exponent],["modulo",modulo],["multiply",multiply],["negative",negative],["positive",positive],["scalarAdd",scalarAdd],["scalarDivide",scalarDivide],["scalarExponent",scalarExponent],["scalarModulo",scalarModulo],["scalarMultiply",scalarMultiply],["scalarSubtract",scalarSubtract],["subtract",subtract]]),Compiler.func([["bitwiseAnd",bitwiseAnd],["bitwiseNot",bitwiseNot],["bitwiseOr",bitwiseOr],["shiftLeft",shiftLeft],["shiftRight",shiftRight]]),Compiler.func([["equal",equal],["greater",greater],["greaterEqual",greaterEqual],["notEqual",notEqual],["smaller",smaller],["smallerEqual",smallerEqual]]),Compiler.func([["conjugate",conjugate],["imaginary",imaginary],["real",real]]),Compiler.func([["combination",combination],["factorial",factorial],["permutation",permutation]]),Compiler.func([["logicalAnd",logicalAnd],["logicalNot",logicalNot],["logicalOr",logicalOr]]),Compiler.func([["adjoint",adjoint],["cofactor",cofactor],["determinant",determinant],["hilbertMatrix",hilbertMatrix],["identityMatrix",identityMatrix],["index",matrix],["inverse",inverse],["magicMatrix",magicMatrix],["minor",minor$1],["oneMatrix",oneMatrix],["reducedRowEchelonForm",reducedRowEchelonForm],["trace",trace],["transpose",transpose$1],["zeroMatrix",zeroMatrix]]),Compiler.func([["absolute",absolute],["ceiling",ceiling],["factor",factor$1],["fibonacci",fibonacci$1],["floor",floor$1],["greatestCommonDivisor",greatestCommonDivisor],["leastCommonMultiple",leastCommonMultiple],["prime",prime$1],["reciprocal",reciprocal$1],["round",round$1],["sign",sign],["truncation",truncation]]),Compiler.func([["intersection",intersection$1],["union",union$1]]),Compiler.func([["maximum",maximum],["mean",mean$1],["minimum",minimum],["product",product],["random",random],["range",range$1],["sum",sum$1]]),Compiler.func([["concatenate",concatenate],["length",length]]),Compiler.func([["assign",assign],["columnSplit",columnSplit],["commonBracket",commonBracket],["matrixBracket",matrixBracket],["property",property],["omitted",omitted],["rowSplit",rowSplit],["setBracket",setBracket]]),Compiler.func([["memory",memory],["type",type$1]]),Compiler.strc([["command",command],["equation",equation],["expression",expression],["function",_function],["step",step],["token",token]])));var module$1=Module$1,decimalPlaces=-1,developmentMode=!1,promptShowRuntime=!1,promptShowSteps=!1,strictBoolean=!0,tabSize=2,testMode=!1,require$$2={decimalPlaces:decimalPlaces,developmentMode:developmentMode,promptShowRuntime:promptShowRuntime,promptShowSteps:promptShowSteps,strictBoolean:strictBoolean,tabSize:tabSize,testMode:testMode},github="Please create a GitHub issue about how you received this message, thank you. ",require$$3={github:github,"error:emptyArgumentInFinalize":"Empty argument in finalize function.","error:functionAgreement":"Function does not agree with parameter types.","error:inputEmptyInDirect":"Direct input is empty.","error:inputEmptyInPrompt":"Prompt input is empty.","error:inputNotArrayInDirect":"Direct input is not an array.","error:inputNotStringInPrompt":"Prompt input is not a string.","error:invalidArgumentLength":"Invalid argument length.","error:invalidArgumentLogic":"Invalid argument logic.","error:invalidConfigProperty":"Invalid configuration property in config command","error:invalidListProperty":"Invalid list property in list command","error:invalidMatrixDimensions":"Invalid matrix dimensions.","error:invalidMemoryIndex":"Invalid index for accessing memory.","error:invalidParametersInCommand":"Invalid parameters in command.","error:invalidSequenceIndex":"Invalid sequence index argument.","error:invalidSymbol":"Invalid symbol in prompt input.","error:undefinedVariable":"Variable is undefined but used.","error:unmatchedBrackets":"Some brackets are unmatched.","issue:invalidExpressionInConstruct":"Invalid expression in constructor.","issue:invalidFunctionOrder":"Invalid function order.","issue:invalidMessage":"Invalid message detected.","issue:invalidModuleInBuild":"Invalid module in build function.","issue:invalidModuleInIdentify":"Invalid module in identify function.","issue:invalidResultLengthInProcess":"Invalid result length in process function.","issue:invalidTokenInParse":"Invalid token in parse function.","warn:invalidNumberFactor":"Integer input smaller than 1 cannot be factored.","warn:negativeFactorial":"Factorial function has negative integer input. Currenly gamma function has not been implemented.","warn:negativePermutation":"Permutation parameters is negative.","warn:strictBoolean":"Strict boolean configuration is set to true. Boolean to expression conversion is not allowed.","warn:magicMatrixDimensionTwo":"There is no magic matrix with dimension 2.","warn:zeroExponentOfZero":"Zero raised to exponent of zero is undefined.","warn:zeroMatrixDeterminant":"Determinant of matrix is zero."},about=["about"],clear=["clear"],config=["config"],help=["help"],list=["list"],i=["complex",["integer",0],["integer",1]],abs=["absolute","r"],adj=["adjoint","r"],ceil=["ceiling","r"],cof=["cofactor","r"],concat=["concatenate","r"],conj=["conjugate","r"],det=["determinant","r"],factor=["factor","r"],fibonacci=["fibonacci","r"],floor=["floor","r"],gcd=["greatestCommonDivisor","r"],hilbmat=["hilbertMatrix","r"],idmat=["identityMatrix","r"],im=["imaginary","r"],index=["index","r"],intersection=["intersection","r"],inv=["inverse","r"],lcm=["leastCommonMultiple","r"],len=["length","r"],magicmat=["magicMatrix","r"],max=["maximum","r"],mean=["mean","r"],mem=["memory","r"],min=["minimum","r"],minor=["minor","r"],ncr=["combination","r"],npr=["permutation","r"],onemat=["oneMatrix","r"],prime=["prime","r"],prod=["product","r"],rand=["random","r"],range=["range","r"],re=["real","r"],reciprocal=["reciprocal","r"],round=["round","r"],rref=["reducedRowEchelonForm","r"],sgn=["sign","r"],sum=["sum","r"],tr=["trace","r"],transpose=["transpose","r"],trunc=["truncation","r"],type=["type","r"],union=["union","r"],zeromat=["zeroMatrix","r"],require$$4={about:about,clear:clear,config:config,help:help,list:list,false:["boolean",!1],i:i,true:["boolean",!0],"()":["argument",null],abs:abs,adj:adj,ceil:ceil,cof:cof,concat:concat,conj:conj,det:det,factor:factor,fibonacci:fibonacci,floor:floor,gcd:gcd,hilbmat:hilbmat,idmat:idmat,im:im,index:index,intersection:intersection,inv:inv,lcm:lcm,len:len,magicmat:magicmat,max:max,mean:mean,mem:mem,min:min,minor:minor,ncr:ncr,npr:npr,onemat:onemat,prime:prime,prod:prod,rand:rand,range:range,re:re,reciprocal:reciprocal,round:round,rref:rref,sgn:sgn,sum:sum,tr:tr,transpose:transpose,trunc:trunc,type:type,union:union,zeromat:zeromat,"+":["add","b"],"=":["assign","b"],"&":["bitwiseAnd","b"],"~":["bitwiseNot","r"],"|":["bitwiseOr","b"],",":["columnSplit","x"],"(":["commonBracket","n"],")":["commonBracket","x"],"_.":["decimal","b"],"/":["divide","b"],"==":["equal","b"],"^":["exponent","b"],"!":["factorial","l"],">":["greater","b"],">=":["greaterEqual","b"],"&&":["logicalAnd","b"],"_!":["logicalNot","r"],"||":["logicalOr","b"],"[":["matrixBracket","n"],"]":["matrixBracket","x"],"%":["modulo","b"],"*":["multiply","b"],"_-":["negative","r"],"!=":["notEqual","b"],"_+":["positive","r"],".":["property","b"],";":["rowSplit","x"],".+":["scalarAdd","b"],"./":["scalarDivide","b"],".^":["scalarExponent","b"],".%":["scalarModulo","b"],".*":["scalarMultiply","b"],".-":["scalarSubtract","b"],"{":["setBracket","n"],"}":["setBracket","x"],"<<":["shiftLeft","b"],">>":["shiftRight","b"],"<":["smaller","b"],"<=":["smallerEqual","b"],"-":["subtract","b"]};const Types=helpers["Types"],Module=module$1,Config=require$$2,Message=require$$3,Refer=require$$4;class Lime{constructor(t){this.config={...Config,...t},this.module=Module,this.variables=new Map,this.memory=[],this.store={}}get answer(){return this.variables.get("ans").print()}prompt(t){try{return this.run(t)}catch(t){return this.message(t)}}evaluate(t){try{return this.run(t)}catch(t){return this.config.testMode||console.log(this.message(t)),""}}run(t){if(!Types.isString(t))throw new Error("error:inputNotStringInPrompt");if(0===t.length)throw new Error("error:inputEmptyInPrompt");this.variables.has("ans")||this.variables.set("ans",this.direct([0]));const e=this.build("equation")(t);return this.lex(e),this.identify("command")(e.result[0])?e.result[0].execute(t):(this.memory.push(e),this.config.promptShowRuntime&&console.log(`Equation runtime: ${e.runtime/1e3}s`),this.variables.set("ans",e.result[0]),this.answer)}direct(t){try{if(!Types.isArray(t))throw new Error("error:inputNotArrayInDirect");if(0===t.length)throw new Error("error:inputEmptyInDirect");const e=this.build("equation")(t);return e.record(this.build("step")(e.input.map(t=>!Types.isString(t)&&!Types.isNumber(t)||Types.isUndefined(this.refer(t))?t:this.refer(t)))),this.process(e),e.result[0]}catch(t){return this.config.testMode?this.message(t):void console.log(this.message(t))}}message(t){var e=new Error("issue:invalidMessage");if(!Message.hasOwnProperty(t.message)||!t.message.includes(":"))return console.log(t),this.message(e);var i=t.message.split(":");let r;switch(i[0]){case"error":r="!";break;case"warn":r="?";break;case"issue":r="i";break;default:return this.message(e)}return this.config.developmentMode&&"i"===r&&console.log(t),`[${r}] ${i[1]}
${Message[t.message]} `+("i"===r?`
`+Message.github:"")}lex(t){const i=t.input,r=[];for(let e=0;e<i.length;e++){const s=i[e];let t=s;if(s.match(/\s/))r.push(this.build("token")("whitespace"));else if(s.match(/\d/)){for(;e+1<i.length&&i[e+1].match(/\d/);)t+=i[++e];r.push(this.build("token")("integer",t))}else if(s.match(/\w/)){for(;e+1<i.length&&i[e+1].match(/\w/);)t+=i[++e];r.push(this.build("token")("variable",t))}else r.push(this.build("token")("symbol",t))}t.record(r),this.parse(t)}parse(t){var e=t.solution.shift();const i=[];let r=!1,s="";for(let t=0;t<e.length;t++){switch(e[t].type){case"whitespace":break;case"integer":i.push(this.build("integer")(e[t].value));break;case"symbol":case"variable":if('"'===e[t].value)r=!0,s="";else if(Refer.hasOwnProperty(e[t].value))i.push(this.refer(e[t].value));else{if("variable"!==e[t].type)throw new Error("error:invalidSymbol");i.push(this.build("variable")(e[t].value))}break;default:throw new Error("issue:invalidTokenInParse")}for(;t+1<e.length&&r;)'"'===e[t+1].value?(i.push(this.build("string")(s)),r=!1,t++):s+=""+("whitespace"===e[++t].type?" ":e[t].value)}if(r)throw new Error("error:unmatchedBrackets");t.record(this.build("step")(i)),this.identify("command")(t.result[0])||this.process(t)}process(i){for(;;){for(let t=0;t<i.result.length;t++)0<t&&this.identify("expression")(i.result[t-1],i.result[t])&&i.result.splice(t,0,this.build("omitted")("b"));let e=-1;for(let t=0;t<i.result.length;t++)this.identify("function")(i.result[t])&&(e=e<0||i.result[t].order>i.result[e].order?t:e);if(e<0)break;var t=this.build("step")(i.result,e);i.record(i.result[e].evaluate(t))}if(1!==i.result.length||this.identify("argument")(i.result[0])&&1!==i.result[0].length)throw new Error("issue:invalidResultLengthInProcess");i.record(this.build("step")([i.result[0].finalize()]))}identify(...i){if(i.every(t=>this.module.has(t)))return(...t)=>t.every(e=>i.some(t=>Types.isClass(this.module.get(t),e)));throw new Error("issue:invalidModuleInIdentify")}build(e){if(this.module.has(e))return(...t)=>new(this.module.get(e))(this,...t);throw new Error("issue:invalidModuleInBuild")}refer(t){return Types.isNumber(t)?this.build("integer")(t):Refer.hasOwnProperty(t)?this.build(Refer[t][0])(...Refer[t].slice(1).map(t=>Types.isArray(t)?this.build(t[0])(...t.slice(1)):t)):void 0}}var lime=t=>new Lime(t);module.exports=lime;
